version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation
    parameters:
      stack:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack >>

jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  build-upload:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      # build and push Docker image
      - run: 
          name: build and push
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build --platform=linux/amd64 --tag=macthanhca/price-prediction:$TAG .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push macthanhca/price-prediction:$TAG
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Create eks
          no_output_timeout: 45m
          command: |
            aws cloudformation deploy \
              --template-file ~/project/.circleci/files/eks.yml \
              --stack-name "eks-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ProjectName="aws-devops" \
              --capabilities CAPABILITY_NAMED_IAM \
              --tags project=capstone-devops
      - destroy-environment:
          stack: eks-${CIRCLE_WORKFLOW_ID:0:7}
  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum check-update
            yum install -y curl tar gzip sudo
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name myEKSCluster
            yum clean all
            sudo yum makecache
            sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
            sudo yum install -y yum-utils
            echo '[docker-ce-stable]
name=Docker CE Stable - $basearch
baseurl=https://download.docker.com/linux/centos/7/$basearch/stable
enabled=1
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg' >> /etc/yum.repos.d/docker.repo
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
      - run:
          name: Pull image and deploy to 
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker image pull macthanhca/price-prediction:0.1.$CIRCLE_BUILD_NUM
            kubectl run price-prediction\
              --image=macthanhca/price-prediction:0.1.$CIRCLE_BUILD_NUM\
              --port=80 --labels app=price-predictione
            kubectl get deploy,rs,svc,pods
            kubectl port-forward pod/price-prediction --address 0.0.0.0 8000:80
      # - destroy-environment:
      #     stack: eks-${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
      # - lint
      # - build-upload:
      #     requires: [lint]
      # - deploy-infrastructure:
      #     requires: [build-upload]
      - deploy
      # :
      #     requires: [deploy-infrastructure]